// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stream_2eproto;
namespace simpleStream {
class RecvRequest;
class RecvRequestDefaultTypeInternal;
extern RecvRequestDefaultTypeInternal _RecvRequest_default_instance_;
class RecvResponse;
class RecvResponseDefaultTypeInternal;
extern RecvResponseDefaultTypeInternal _RecvResponse_default_instance_;
class SendRequest;
class SendRequestDefaultTypeInternal;
extern SendRequestDefaultTypeInternal _SendRequest_default_instance_;
class SendResponse;
class SendResponseDefaultTypeInternal;
extern SendResponseDefaultTypeInternal _SendResponse_default_instance_;
class StreamHeader;
class StreamHeaderDefaultTypeInternal;
extern StreamHeaderDefaultTypeInternal _StreamHeader_default_instance_;
class StreamPayload;
class StreamPayloadDefaultTypeInternal;
extern StreamPayloadDefaultTypeInternal _StreamPayload_default_instance_;
}  // namespace simpleStream
PROTOBUF_NAMESPACE_OPEN
template<> ::simpleStream::RecvRequest* Arena::CreateMaybeMessage<::simpleStream::RecvRequest>(Arena*);
template<> ::simpleStream::RecvResponse* Arena::CreateMaybeMessage<::simpleStream::RecvResponse>(Arena*);
template<> ::simpleStream::SendRequest* Arena::CreateMaybeMessage<::simpleStream::SendRequest>(Arena*);
template<> ::simpleStream::SendResponse* Arena::CreateMaybeMessage<::simpleStream::SendResponse>(Arena*);
template<> ::simpleStream::StreamHeader* Arena::CreateMaybeMessage<::simpleStream::StreamHeader>(Arena*);
template<> ::simpleStream::StreamPayload* Arena::CreateMaybeMessage<::simpleStream::StreamPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace simpleStream {

// ===================================================================

class StreamHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simpleStream.StreamHeader) */ {
 public:
  inline StreamHeader() : StreamHeader(nullptr) {}
  virtual ~StreamHeader();

  StreamHeader(const StreamHeader& from);
  StreamHeader(StreamHeader&& from) noexcept
    : StreamHeader() {
    *this = ::std::move(from);
  }

  inline StreamHeader& operator=(const StreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamHeader& operator=(StreamHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamHeader* internal_default_instance() {
    return reinterpret_cast<const StreamHeader*>(
               &_StreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamHeader& a, StreamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamHeader* New() const final {
    return CreateMaybeMessage<StreamHeader>(nullptr);
  }

  StreamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamHeader& from);
  void MergeFrom(const StreamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleStream.StreamHeader";
  }
  protected:
  explicit StreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_2eproto);
    return ::descriptor_table_stream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:simpleStream.StreamHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class StreamPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simpleStream.StreamPayload) */ {
 public:
  inline StreamPayload() : StreamPayload(nullptr) {}
  virtual ~StreamPayload();

  StreamPayload(const StreamPayload& from);
  StreamPayload(StreamPayload&& from) noexcept
    : StreamPayload() {
    *this = ::std::move(from);
  }

  inline StreamPayload& operator=(const StreamPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPayload& operator=(StreamPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamPayload* internal_default_instance() {
    return reinterpret_cast<const StreamPayload*>(
               &_StreamPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamPayload& a, StreamPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamPayload* New() const final {
    return CreateMaybeMessage<StreamPayload>(nullptr);
  }

  StreamPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamPayload& from);
  void MergeFrom(const StreamPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleStream.StreamPayload";
  }
  protected:
  explicit StreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_2eproto);
    return ::descriptor_table_stream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:simpleStream.StreamPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class SendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simpleStream.SendRequest) */ {
 public:
  inline SendRequest() : SendRequest(nullptr) {}
  virtual ~SendRequest();

  SendRequest(const SendRequest& from);
  SendRequest(SendRequest&& from) noexcept
    : SendRequest() {
    *this = ::std::move(from);
  }

  inline SendRequest& operator=(const SendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRequest& operator=(SendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendRequest& default_instance();

  enum ContentsCase {
    kHeader = 1,
    kPayload = 2,
    CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRequest* internal_default_instance() {
    return reinterpret_cast<const SendRequest*>(
               &_SendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendRequest& a, SendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendRequest* New() const final {
    return CreateMaybeMessage<SendRequest>(nullptr);
  }

  SendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendRequest& from);
  void MergeFrom(const SendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleStream.SendRequest";
  }
  protected:
  explicit SendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_2eproto);
    return ::descriptor_table_stream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // .simpleStream.StreamHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::simpleStream::StreamHeader& header() const;
  ::simpleStream::StreamHeader* release_header();
  ::simpleStream::StreamHeader* mutable_header();
  void set_allocated_header(::simpleStream::StreamHeader* header);
  private:
  const ::simpleStream::StreamHeader& _internal_header() const;
  ::simpleStream::StreamHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::simpleStream::StreamHeader* header);
  ::simpleStream::StreamHeader* unsafe_arena_release_header();

  // .simpleStream.StreamPayload payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::simpleStream::StreamPayload& payload() const;
  ::simpleStream::StreamPayload* release_payload();
  ::simpleStream::StreamPayload* mutable_payload();
  void set_allocated_payload(::simpleStream::StreamPayload* payload);
  private:
  const ::simpleStream::StreamPayload& _internal_payload() const;
  ::simpleStream::StreamPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::simpleStream::StreamPayload* payload);
  ::simpleStream::StreamPayload* unsafe_arena_release_payload();

  void clear_contents();
  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:simpleStream.SendRequest)
 private:
  class _Internal;
  void set_has_header();
  void set_has_payload();

  inline bool has_contents() const;
  inline void clear_has_contents();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentsUnion {
    ContentsUnion() {}
    ::simpleStream::StreamHeader* header_;
    ::simpleStream::StreamPayload* payload_;
  } contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class SendResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simpleStream.SendResponse) */ {
 public:
  inline SendResponse() : SendResponse(nullptr) {}
  virtual ~SendResponse();

  SendResponse(const SendResponse& from);
  SendResponse(SendResponse&& from) noexcept
    : SendResponse() {
    *this = ::std::move(from);
  }

  inline SendResponse& operator=(const SendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendResponse& operator=(SendResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendResponse* internal_default_instance() {
    return reinterpret_cast<const SendResponse*>(
               &_SendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SendResponse& a, SendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendResponse* New() const final {
    return CreateMaybeMessage<SendResponse>(nullptr);
  }

  SendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendResponse& from);
  void MergeFrom(const SendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleStream.SendResponse";
  }
  protected:
  explicit SendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_2eproto);
    return ::descriptor_table_stream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:simpleStream.SendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class RecvRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simpleStream.RecvRequest) */ {
 public:
  inline RecvRequest() : RecvRequest(nullptr) {}
  virtual ~RecvRequest();

  RecvRequest(const RecvRequest& from);
  RecvRequest(RecvRequest&& from) noexcept
    : RecvRequest() {
    *this = ::std::move(from);
  }

  inline RecvRequest& operator=(const RecvRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvRequest& operator=(RecvRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecvRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecvRequest* internal_default_instance() {
    return reinterpret_cast<const RecvRequest*>(
               &_RecvRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RecvRequest& a, RecvRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecvRequest* New() const final {
    return CreateMaybeMessage<RecvRequest>(nullptr);
  }

  RecvRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecvRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecvRequest& from);
  void MergeFrom(const RecvRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleStream.RecvRequest";
  }
  protected:
  explicit RecvRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_2eproto);
    return ::descriptor_table_stream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:simpleStream.RecvRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class RecvResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simpleStream.RecvResponse) */ {
 public:
  inline RecvResponse() : RecvResponse(nullptr) {}
  virtual ~RecvResponse();

  RecvResponse(const RecvResponse& from);
  RecvResponse(RecvResponse&& from) noexcept
    : RecvResponse() {
    *this = ::std::move(from);
  }

  inline RecvResponse& operator=(const RecvResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvResponse& operator=(RecvResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecvResponse& default_instance();

  enum ContentsCase {
    kHeader = 1,
    kPayload = 2,
    CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecvResponse* internal_default_instance() {
    return reinterpret_cast<const RecvResponse*>(
               &_RecvResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RecvResponse& a, RecvResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecvResponse* New() const final {
    return CreateMaybeMessage<RecvResponse>(nullptr);
  }

  RecvResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecvResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecvResponse& from);
  void MergeFrom(const RecvResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleStream.RecvResponse";
  }
  protected:
  explicit RecvResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_2eproto);
    return ::descriptor_table_stream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // .simpleStream.StreamHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::simpleStream::StreamHeader& header() const;
  ::simpleStream::StreamHeader* release_header();
  ::simpleStream::StreamHeader* mutable_header();
  void set_allocated_header(::simpleStream::StreamHeader* header);
  private:
  const ::simpleStream::StreamHeader& _internal_header() const;
  ::simpleStream::StreamHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::simpleStream::StreamHeader* header);
  ::simpleStream::StreamHeader* unsafe_arena_release_header();

  // .simpleStream.StreamPayload payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::simpleStream::StreamPayload& payload() const;
  ::simpleStream::StreamPayload* release_payload();
  ::simpleStream::StreamPayload* mutable_payload();
  void set_allocated_payload(::simpleStream::StreamPayload* payload);
  private:
  const ::simpleStream::StreamPayload& _internal_payload() const;
  ::simpleStream::StreamPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::simpleStream::StreamPayload* payload);
  ::simpleStream::StreamPayload* unsafe_arena_release_payload();

  void clear_contents();
  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:simpleStream.RecvResponse)
 private:
  class _Internal;
  void set_has_header();
  void set_has_payload();

  inline bool has_contents() const;
  inline void clear_has_contents();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentsUnion {
    ContentsUnion() {}
    ::simpleStream::StreamHeader* header_;
    ::simpleStream::StreamPayload* payload_;
  } contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_stream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamHeader

// string type = 1;
inline void StreamHeader::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamHeader::type() const {
  // @@protoc_insertion_point(field_get:simpleStream.StreamHeader.type)
  return _internal_type();
}
inline void StreamHeader::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:simpleStream.StreamHeader.type)
}
inline std::string* StreamHeader::mutable_type() {
  // @@protoc_insertion_point(field_mutable:simpleStream.StreamHeader.type)
  return _internal_mutable_type();
}
inline const std::string& StreamHeader::_internal_type() const {
  return type_.Get();
}
inline void StreamHeader::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamHeader::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simpleStream.StreamHeader.type)
}
inline void StreamHeader::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:simpleStream.StreamHeader.type)
}
inline void StreamHeader::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simpleStream.StreamHeader.type)
}
inline std::string* StreamHeader::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamHeader::release_type() {
  // @@protoc_insertion_point(field_release:simpleStream.StreamHeader.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamHeader::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simpleStream.StreamHeader.type)
}

// uint64 size = 2;
inline void StreamHeader::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamHeader::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamHeader::size() const {
  // @@protoc_insertion_point(field_get:simpleStream.StreamHeader.size)
  return _internal_size();
}
inline void StreamHeader::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void StreamHeader::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:simpleStream.StreamHeader.size)
}

// -------------------------------------------------------------------

// StreamPayload

// bytes data = 1;
inline void StreamPayload::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamPayload::data() const {
  // @@protoc_insertion_point(field_get:simpleStream.StreamPayload.data)
  return _internal_data();
}
inline void StreamPayload::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:simpleStream.StreamPayload.data)
}
inline std::string* StreamPayload::mutable_data() {
  // @@protoc_insertion_point(field_mutable:simpleStream.StreamPayload.data)
  return _internal_mutable_data();
}
inline const std::string& StreamPayload::_internal_data() const {
  return data_.Get();
}
inline void StreamPayload::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamPayload::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simpleStream.StreamPayload.data)
}
inline void StreamPayload::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:simpleStream.StreamPayload.data)
}
inline void StreamPayload::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simpleStream.StreamPayload.data)
}
inline std::string* StreamPayload::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamPayload::release_data() {
  // @@protoc_insertion_point(field_release:simpleStream.StreamPayload.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamPayload::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simpleStream.StreamPayload.data)
}

// -------------------------------------------------------------------

// SendRequest

// .simpleStream.StreamHeader header = 1;
inline bool SendRequest::_internal_has_header() const {
  return contents_case() == kHeader;
}
inline bool SendRequest::has_header() const {
  return _internal_has_header();
}
inline void SendRequest::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void SendRequest::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete contents_.header_;
    }
    clear_has_contents();
  }
}
inline ::simpleStream::StreamHeader* SendRequest::release_header() {
  // @@protoc_insertion_point(field_release:simpleStream.SendRequest.header)
  if (_internal_has_header()) {
    clear_has_contents();
      ::simpleStream::StreamHeader* temp = contents_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::simpleStream::StreamHeader& SendRequest::_internal_header() const {
  return _internal_has_header()
      ? *contents_.header_
      : *reinterpret_cast< ::simpleStream::StreamHeader*>(&::simpleStream::_StreamHeader_default_instance_);
}
inline const ::simpleStream::StreamHeader& SendRequest::header() const {
  // @@protoc_insertion_point(field_get:simpleStream.SendRequest.header)
  return _internal_header();
}
inline ::simpleStream::StreamHeader* SendRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:simpleStream.SendRequest.header)
  if (_internal_has_header()) {
    clear_has_contents();
    ::simpleStream::StreamHeader* temp = contents_.header_;
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendRequest::unsafe_arena_set_allocated_header(::simpleStream::StreamHeader* header) {
  clear_contents();
  if (header) {
    set_has_header();
    contents_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simpleStream.SendRequest.header)
}
inline ::simpleStream::StreamHeader* SendRequest::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_contents();
    set_has_header();
    contents_.header_ = CreateMaybeMessage< ::simpleStream::StreamHeader >(GetArena());
  }
  return contents_.header_;
}
inline ::simpleStream::StreamHeader* SendRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:simpleStream.SendRequest.header)
  return _internal_mutable_header();
}

// .simpleStream.StreamPayload payload = 2;
inline bool SendRequest::_internal_has_payload() const {
  return contents_case() == kPayload;
}
inline bool SendRequest::has_payload() const {
  return _internal_has_payload();
}
inline void SendRequest::set_has_payload() {
  _oneof_case_[0] = kPayload;
}
inline void SendRequest::clear_payload() {
  if (_internal_has_payload()) {
    if (GetArena() == nullptr) {
      delete contents_.payload_;
    }
    clear_has_contents();
  }
}
inline ::simpleStream::StreamPayload* SendRequest::release_payload() {
  // @@protoc_insertion_point(field_release:simpleStream.SendRequest.payload)
  if (_internal_has_payload()) {
    clear_has_contents();
      ::simpleStream::StreamPayload* temp = contents_.payload_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::simpleStream::StreamPayload& SendRequest::_internal_payload() const {
  return _internal_has_payload()
      ? *contents_.payload_
      : *reinterpret_cast< ::simpleStream::StreamPayload*>(&::simpleStream::_StreamPayload_default_instance_);
}
inline const ::simpleStream::StreamPayload& SendRequest::payload() const {
  // @@protoc_insertion_point(field_get:simpleStream.SendRequest.payload)
  return _internal_payload();
}
inline ::simpleStream::StreamPayload* SendRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:simpleStream.SendRequest.payload)
  if (_internal_has_payload()) {
    clear_has_contents();
    ::simpleStream::StreamPayload* temp = contents_.payload_;
    contents_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendRequest::unsafe_arena_set_allocated_payload(::simpleStream::StreamPayload* payload) {
  clear_contents();
  if (payload) {
    set_has_payload();
    contents_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simpleStream.SendRequest.payload)
}
inline ::simpleStream::StreamPayload* SendRequest::_internal_mutable_payload() {
  if (!_internal_has_payload()) {
    clear_contents();
    set_has_payload();
    contents_.payload_ = CreateMaybeMessage< ::simpleStream::StreamPayload >(GetArena());
  }
  return contents_.payload_;
}
inline ::simpleStream::StreamPayload* SendRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:simpleStream.SendRequest.payload)
  return _internal_mutable_payload();
}

inline bool SendRequest::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void SendRequest::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline SendRequest::ContentsCase SendRequest::contents_case() const {
  return SendRequest::ContentsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SendResponse

// string type = 1;
inline void SendResponse::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendResponse::type() const {
  // @@protoc_insertion_point(field_get:simpleStream.SendResponse.type)
  return _internal_type();
}
inline void SendResponse::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:simpleStream.SendResponse.type)
}
inline std::string* SendResponse::mutable_type() {
  // @@protoc_insertion_point(field_mutable:simpleStream.SendResponse.type)
  return _internal_mutable_type();
}
inline const std::string& SendResponse::_internal_type() const {
  return type_.Get();
}
inline void SendResponse::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendResponse::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simpleStream.SendResponse.type)
}
inline void SendResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:simpleStream.SendResponse.type)
}
inline void SendResponse::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simpleStream.SendResponse.type)
}
inline std::string* SendResponse::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendResponse::release_type() {
  // @@protoc_insertion_point(field_release:simpleStream.SendResponse.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simpleStream.SendResponse.type)
}

// uint64 size = 2;
inline void SendResponse::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendResponse::size() const {
  // @@protoc_insertion_point(field_get:simpleStream.SendResponse.size)
  return _internal_size();
}
inline void SendResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void SendResponse::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:simpleStream.SendResponse.size)
}

// -------------------------------------------------------------------

// RecvRequest

// string type = 1;
inline void RecvRequest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecvRequest::type() const {
  // @@protoc_insertion_point(field_get:simpleStream.RecvRequest.type)
  return _internal_type();
}
inline void RecvRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:simpleStream.RecvRequest.type)
}
inline std::string* RecvRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:simpleStream.RecvRequest.type)
  return _internal_mutable_type();
}
inline const std::string& RecvRequest::_internal_type() const {
  return type_.Get();
}
inline void RecvRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecvRequest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simpleStream.RecvRequest.type)
}
inline void RecvRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:simpleStream.RecvRequest.type)
}
inline void RecvRequest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simpleStream.RecvRequest.type)
}
inline std::string* RecvRequest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecvRequest::release_type() {
  // @@protoc_insertion_point(field_release:simpleStream.RecvRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecvRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simpleStream.RecvRequest.type)
}

// uint64 size = 2;
inline void RecvRequest::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RecvRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RecvRequest::size() const {
  // @@protoc_insertion_point(field_get:simpleStream.RecvRequest.size)
  return _internal_size();
}
inline void RecvRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void RecvRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:simpleStream.RecvRequest.size)
}

// -------------------------------------------------------------------

// RecvResponse

// .simpleStream.StreamHeader header = 1;
inline bool RecvResponse::_internal_has_header() const {
  return contents_case() == kHeader;
}
inline bool RecvResponse::has_header() const {
  return _internal_has_header();
}
inline void RecvResponse::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void RecvResponse::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete contents_.header_;
    }
    clear_has_contents();
  }
}
inline ::simpleStream::StreamHeader* RecvResponse::release_header() {
  // @@protoc_insertion_point(field_release:simpleStream.RecvResponse.header)
  if (_internal_has_header()) {
    clear_has_contents();
      ::simpleStream::StreamHeader* temp = contents_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::simpleStream::StreamHeader& RecvResponse::_internal_header() const {
  return _internal_has_header()
      ? *contents_.header_
      : *reinterpret_cast< ::simpleStream::StreamHeader*>(&::simpleStream::_StreamHeader_default_instance_);
}
inline const ::simpleStream::StreamHeader& RecvResponse::header() const {
  // @@protoc_insertion_point(field_get:simpleStream.RecvResponse.header)
  return _internal_header();
}
inline ::simpleStream::StreamHeader* RecvResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:simpleStream.RecvResponse.header)
  if (_internal_has_header()) {
    clear_has_contents();
    ::simpleStream::StreamHeader* temp = contents_.header_;
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecvResponse::unsafe_arena_set_allocated_header(::simpleStream::StreamHeader* header) {
  clear_contents();
  if (header) {
    set_has_header();
    contents_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simpleStream.RecvResponse.header)
}
inline ::simpleStream::StreamHeader* RecvResponse::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_contents();
    set_has_header();
    contents_.header_ = CreateMaybeMessage< ::simpleStream::StreamHeader >(GetArena());
  }
  return contents_.header_;
}
inline ::simpleStream::StreamHeader* RecvResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:simpleStream.RecvResponse.header)
  return _internal_mutable_header();
}

// .simpleStream.StreamPayload payload = 2;
inline bool RecvResponse::_internal_has_payload() const {
  return contents_case() == kPayload;
}
inline bool RecvResponse::has_payload() const {
  return _internal_has_payload();
}
inline void RecvResponse::set_has_payload() {
  _oneof_case_[0] = kPayload;
}
inline void RecvResponse::clear_payload() {
  if (_internal_has_payload()) {
    if (GetArena() == nullptr) {
      delete contents_.payload_;
    }
    clear_has_contents();
  }
}
inline ::simpleStream::StreamPayload* RecvResponse::release_payload() {
  // @@protoc_insertion_point(field_release:simpleStream.RecvResponse.payload)
  if (_internal_has_payload()) {
    clear_has_contents();
      ::simpleStream::StreamPayload* temp = contents_.payload_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::simpleStream::StreamPayload& RecvResponse::_internal_payload() const {
  return _internal_has_payload()
      ? *contents_.payload_
      : *reinterpret_cast< ::simpleStream::StreamPayload*>(&::simpleStream::_StreamPayload_default_instance_);
}
inline const ::simpleStream::StreamPayload& RecvResponse::payload() const {
  // @@protoc_insertion_point(field_get:simpleStream.RecvResponse.payload)
  return _internal_payload();
}
inline ::simpleStream::StreamPayload* RecvResponse::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:simpleStream.RecvResponse.payload)
  if (_internal_has_payload()) {
    clear_has_contents();
    ::simpleStream::StreamPayload* temp = contents_.payload_;
    contents_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecvResponse::unsafe_arena_set_allocated_payload(::simpleStream::StreamPayload* payload) {
  clear_contents();
  if (payload) {
    set_has_payload();
    contents_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simpleStream.RecvResponse.payload)
}
inline ::simpleStream::StreamPayload* RecvResponse::_internal_mutable_payload() {
  if (!_internal_has_payload()) {
    clear_contents();
    set_has_payload();
    contents_.payload_ = CreateMaybeMessage< ::simpleStream::StreamPayload >(GetArena());
  }
  return contents_.payload_;
}
inline ::simpleStream::StreamPayload* RecvResponse::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:simpleStream.RecvResponse.payload)
  return _internal_mutable_payload();
}

inline bool RecvResponse::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void RecvResponse::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline RecvResponse::ContentsCase RecvResponse::contents_case() const {
  return RecvResponse::ContentsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simpleStream

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stream_2eproto

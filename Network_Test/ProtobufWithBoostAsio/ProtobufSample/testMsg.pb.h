// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_testMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_testMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_testMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_testMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_testMsg_2eproto;
namespace tutorial {
class Test1;
class Test1DefaultTypeInternal;
extern Test1DefaultTypeInternal _Test1_default_instance_;
class Test2;
class Test2DefaultTypeInternal;
extern Test2DefaultTypeInternal _Test2_default_instance_;
class Test3;
class Test3DefaultTypeInternal;
extern Test3DefaultTypeInternal _Test3_default_instance_;
class TestMsg;
class TestMsgDefaultTypeInternal;
extern TestMsgDefaultTypeInternal _TestMsg_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::Test1* Arena::CreateMaybeMessage<::tutorial::Test1>(Arena*);
template<> ::tutorial::Test2* Arena::CreateMaybeMessage<::tutorial::Test2>(Arena*);
template<> ::tutorial::Test3* Arena::CreateMaybeMessage<::tutorial::Test3>(Arena*);
template<> ::tutorial::TestMsg* Arena::CreateMaybeMessage<::tutorial::TestMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class TestMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.TestMsg) */ {
 public:
  inline TestMsg() : TestMsg(nullptr) {}
  virtual ~TestMsg();

  TestMsg(const TestMsg& from);
  TestMsg(TestMsg&& from) noexcept
    : TestMsg() {
    *this = ::std::move(from);
  }

  inline TestMsg& operator=(const TestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg& operator=(TestMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMsg& default_instance();

  enum WhatTestCase {
    kTest1 = 1,
    kTest2 = 2,
    kTest3 = 3,
    WHATTEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMsg* internal_default_instance() {
    return reinterpret_cast<const TestMsg*>(
               &_TestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMsg& a, TestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMsg* New() const final {
    return CreateMaybeMessage<TestMsg>(nullptr);
  }

  TestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMsg& from);
  void MergeFrom(const TestMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.TestMsg";
  }
  protected:
  explicit TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_testMsg_2eproto);
    return ::descriptor_table_testMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTest1FieldNumber = 1,
    kTest2FieldNumber = 2,
    kTest3FieldNumber = 3,
  };
  // .tutorial.Test1 test1 = 1;
  bool has_test1() const;
  private:
  bool _internal_has_test1() const;
  public:
  void clear_test1();
  const ::tutorial::Test1& test1() const;
  ::tutorial::Test1* release_test1();
  ::tutorial::Test1* mutable_test1();
  void set_allocated_test1(::tutorial::Test1* test1);
  private:
  const ::tutorial::Test1& _internal_test1() const;
  ::tutorial::Test1* _internal_mutable_test1();
  public:
  void unsafe_arena_set_allocated_test1(
      ::tutorial::Test1* test1);
  ::tutorial::Test1* unsafe_arena_release_test1();

  // .tutorial.Test2 test2 = 2;
  bool has_test2() const;
  private:
  bool _internal_has_test2() const;
  public:
  void clear_test2();
  const ::tutorial::Test2& test2() const;
  ::tutorial::Test2* release_test2();
  ::tutorial::Test2* mutable_test2();
  void set_allocated_test2(::tutorial::Test2* test2);
  private:
  const ::tutorial::Test2& _internal_test2() const;
  ::tutorial::Test2* _internal_mutable_test2();
  public:
  void unsafe_arena_set_allocated_test2(
      ::tutorial::Test2* test2);
  ::tutorial::Test2* unsafe_arena_release_test2();

  // .tutorial.Test3 test3 = 3;
  bool has_test3() const;
  private:
  bool _internal_has_test3() const;
  public:
  void clear_test3();
  const ::tutorial::Test3& test3() const;
  ::tutorial::Test3* release_test3();
  ::tutorial::Test3* mutable_test3();
  void set_allocated_test3(::tutorial::Test3* test3);
  private:
  const ::tutorial::Test3& _internal_test3() const;
  ::tutorial::Test3* _internal_mutable_test3();
  public:
  void unsafe_arena_set_allocated_test3(
      ::tutorial::Test3* test3);
  ::tutorial::Test3* unsafe_arena_release_test3();

  void clear_WhatTest();
  WhatTestCase WhatTest_case() const;
  // @@protoc_insertion_point(class_scope:tutorial.TestMsg)
 private:
  class _Internal;
  void set_has_test1();
  void set_has_test2();
  void set_has_test3();

  inline bool has_WhatTest() const;
  inline void clear_has_WhatTest();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union WhatTestUnion {
    WhatTestUnion() {}
    ::tutorial::Test1* test1_;
    ::tutorial::Test2* test2_;
    ::tutorial::Test3* test3_;
  } WhatTest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_testMsg_2eproto;
};
// -------------------------------------------------------------------

class Test1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Test1) */ {
 public:
  inline Test1() : Test1(nullptr) {}
  virtual ~Test1();

  Test1(const Test1& from);
  Test1(Test1&& from) noexcept
    : Test1() {
    *this = ::std::move(from);
  }

  inline Test1& operator=(const Test1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test1& operator=(Test1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test1* internal_default_instance() {
    return reinterpret_cast<const Test1*>(
               &_Test1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Test1& a, Test1& b) {
    a.Swap(&b);
  }
  inline void Swap(Test1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test1* New() const final {
    return CreateMaybeMessage<Test1>(nullptr);
  }

  Test1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test1& from);
  void MergeFrom(const Test1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Test1";
  }
  protected:
  explicit Test1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_testMsg_2eproto);
    return ::descriptor_table_testMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // int32 data = 1;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int32 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Test1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_testMsg_2eproto;
};
// -------------------------------------------------------------------

class Test2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Test2) */ {
 public:
  inline Test2() : Test2(nullptr) {}
  virtual ~Test2();

  Test2(const Test2& from);
  Test2(Test2&& from) noexcept
    : Test2() {
    *this = ::std::move(from);
  }

  inline Test2& operator=(const Test2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test2& operator=(Test2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2* internal_default_instance() {
    return reinterpret_cast<const Test2*>(
               &_Test2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Test2& a, Test2& b) {
    a.Swap(&b);
  }
  inline void Swap(Test2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test2* New() const final {
    return CreateMaybeMessage<Test2>(nullptr);
  }

  Test2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test2& from);
  void MergeFrom(const Test2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Test2";
  }
  protected:
  explicit Test2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_testMsg_2eproto);
    return ::descriptor_table_testMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Test2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_testMsg_2eproto;
};
// -------------------------------------------------------------------

class Test3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Test3) */ {
 public:
  inline Test3() : Test3(nullptr) {}
  virtual ~Test3();

  Test3(const Test3& from);
  Test3(Test3&& from) noexcept
    : Test3() {
    *this = ::std::move(from);
  }

  inline Test3& operator=(const Test3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test3& operator=(Test3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test3* internal_default_instance() {
    return reinterpret_cast<const Test3*>(
               &_Test3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Test3& a, Test3& b) {
    a.Swap(&b);
  }
  inline void Swap(Test3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test3* New() const final {
    return CreateMaybeMessage<Test3>(nullptr);
  }

  Test3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test3& from);
  void MergeFrom(const Test3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Test3";
  }
  protected:
  explicit Test3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_testMsg_2eproto);
    return ::descriptor_table_testMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Test3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_testMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMsg

// .tutorial.Test1 test1 = 1;
inline bool TestMsg::_internal_has_test1() const {
  return WhatTest_case() == kTest1;
}
inline bool TestMsg::has_test1() const {
  return _internal_has_test1();
}
inline void TestMsg::set_has_test1() {
  _oneof_case_[0] = kTest1;
}
inline void TestMsg::clear_test1() {
  if (_internal_has_test1()) {
    if (GetArena() == nullptr) {
      delete WhatTest_.test1_;
    }
    clear_has_WhatTest();
  }
}
inline ::tutorial::Test1* TestMsg::release_test1() {
  // @@protoc_insertion_point(field_release:tutorial.TestMsg.test1)
  if (_internal_has_test1()) {
    clear_has_WhatTest();
      ::tutorial::Test1* temp = WhatTest_.test1_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    WhatTest_.test1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tutorial::Test1& TestMsg::_internal_test1() const {
  return _internal_has_test1()
      ? *WhatTest_.test1_
      : *reinterpret_cast< ::tutorial::Test1*>(&::tutorial::_Test1_default_instance_);
}
inline const ::tutorial::Test1& TestMsg::test1() const {
  // @@protoc_insertion_point(field_get:tutorial.TestMsg.test1)
  return _internal_test1();
}
inline ::tutorial::Test1* TestMsg::unsafe_arena_release_test1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tutorial.TestMsg.test1)
  if (_internal_has_test1()) {
    clear_has_WhatTest();
    ::tutorial::Test1* temp = WhatTest_.test1_;
    WhatTest_.test1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestMsg::unsafe_arena_set_allocated_test1(::tutorial::Test1* test1) {
  clear_WhatTest();
  if (test1) {
    set_has_test1();
    WhatTest_.test1_ = test1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.TestMsg.test1)
}
inline ::tutorial::Test1* TestMsg::_internal_mutable_test1() {
  if (!_internal_has_test1()) {
    clear_WhatTest();
    set_has_test1();
    WhatTest_.test1_ = CreateMaybeMessage< ::tutorial::Test1 >(GetArena());
  }
  return WhatTest_.test1_;
}
inline ::tutorial::Test1* TestMsg::mutable_test1() {
  // @@protoc_insertion_point(field_mutable:tutorial.TestMsg.test1)
  return _internal_mutable_test1();
}

// .tutorial.Test2 test2 = 2;
inline bool TestMsg::_internal_has_test2() const {
  return WhatTest_case() == kTest2;
}
inline bool TestMsg::has_test2() const {
  return _internal_has_test2();
}
inline void TestMsg::set_has_test2() {
  _oneof_case_[0] = kTest2;
}
inline void TestMsg::clear_test2() {
  if (_internal_has_test2()) {
    if (GetArena() == nullptr) {
      delete WhatTest_.test2_;
    }
    clear_has_WhatTest();
  }
}
inline ::tutorial::Test2* TestMsg::release_test2() {
  // @@protoc_insertion_point(field_release:tutorial.TestMsg.test2)
  if (_internal_has_test2()) {
    clear_has_WhatTest();
      ::tutorial::Test2* temp = WhatTest_.test2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    WhatTest_.test2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tutorial::Test2& TestMsg::_internal_test2() const {
  return _internal_has_test2()
      ? *WhatTest_.test2_
      : *reinterpret_cast< ::tutorial::Test2*>(&::tutorial::_Test2_default_instance_);
}
inline const ::tutorial::Test2& TestMsg::test2() const {
  // @@protoc_insertion_point(field_get:tutorial.TestMsg.test2)
  return _internal_test2();
}
inline ::tutorial::Test2* TestMsg::unsafe_arena_release_test2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tutorial.TestMsg.test2)
  if (_internal_has_test2()) {
    clear_has_WhatTest();
    ::tutorial::Test2* temp = WhatTest_.test2_;
    WhatTest_.test2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestMsg::unsafe_arena_set_allocated_test2(::tutorial::Test2* test2) {
  clear_WhatTest();
  if (test2) {
    set_has_test2();
    WhatTest_.test2_ = test2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.TestMsg.test2)
}
inline ::tutorial::Test2* TestMsg::_internal_mutable_test2() {
  if (!_internal_has_test2()) {
    clear_WhatTest();
    set_has_test2();
    WhatTest_.test2_ = CreateMaybeMessage< ::tutorial::Test2 >(GetArena());
  }
  return WhatTest_.test2_;
}
inline ::tutorial::Test2* TestMsg::mutable_test2() {
  // @@protoc_insertion_point(field_mutable:tutorial.TestMsg.test2)
  return _internal_mutable_test2();
}

// .tutorial.Test3 test3 = 3;
inline bool TestMsg::_internal_has_test3() const {
  return WhatTest_case() == kTest3;
}
inline bool TestMsg::has_test3() const {
  return _internal_has_test3();
}
inline void TestMsg::set_has_test3() {
  _oneof_case_[0] = kTest3;
}
inline void TestMsg::clear_test3() {
  if (_internal_has_test3()) {
    if (GetArena() == nullptr) {
      delete WhatTest_.test3_;
    }
    clear_has_WhatTest();
  }
}
inline ::tutorial::Test3* TestMsg::release_test3() {
  // @@protoc_insertion_point(field_release:tutorial.TestMsg.test3)
  if (_internal_has_test3()) {
    clear_has_WhatTest();
      ::tutorial::Test3* temp = WhatTest_.test3_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    WhatTest_.test3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tutorial::Test3& TestMsg::_internal_test3() const {
  return _internal_has_test3()
      ? *WhatTest_.test3_
      : *reinterpret_cast< ::tutorial::Test3*>(&::tutorial::_Test3_default_instance_);
}
inline const ::tutorial::Test3& TestMsg::test3() const {
  // @@protoc_insertion_point(field_get:tutorial.TestMsg.test3)
  return _internal_test3();
}
inline ::tutorial::Test3* TestMsg::unsafe_arena_release_test3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tutorial.TestMsg.test3)
  if (_internal_has_test3()) {
    clear_has_WhatTest();
    ::tutorial::Test3* temp = WhatTest_.test3_;
    WhatTest_.test3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestMsg::unsafe_arena_set_allocated_test3(::tutorial::Test3* test3) {
  clear_WhatTest();
  if (test3) {
    set_has_test3();
    WhatTest_.test3_ = test3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.TestMsg.test3)
}
inline ::tutorial::Test3* TestMsg::_internal_mutable_test3() {
  if (!_internal_has_test3()) {
    clear_WhatTest();
    set_has_test3();
    WhatTest_.test3_ = CreateMaybeMessage< ::tutorial::Test3 >(GetArena());
  }
  return WhatTest_.test3_;
}
inline ::tutorial::Test3* TestMsg::mutable_test3() {
  // @@protoc_insertion_point(field_mutable:tutorial.TestMsg.test3)
  return _internal_mutable_test3();
}

inline bool TestMsg::has_WhatTest() const {
  return WhatTest_case() != WHATTEST_NOT_SET;
}
inline void TestMsg::clear_has_WhatTest() {
  _oneof_case_[0] = WHATTEST_NOT_SET;
}
inline TestMsg::WhatTestCase TestMsg::WhatTest_case() const {
  return TestMsg::WhatTestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Test1

// int32 data = 1;
inline void Test1::clear_data() {
  data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test1::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test1::data() const {
  // @@protoc_insertion_point(field_get:tutorial.Test1.data)
  return _internal_data();
}
inline void Test1::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_ = value;
}
inline void Test1::set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:tutorial.Test1.data)
}

// -------------------------------------------------------------------

// Test2

// string text = 1;
inline void Test2::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test2::text() const {
  // @@protoc_insertion_point(field_get:tutorial.Test2.text)
  return _internal_text();
}
inline void Test2::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:tutorial.Test2.text)
}
inline std::string* Test2::mutable_text() {
  // @@protoc_insertion_point(field_mutable:tutorial.Test2.text)
  return _internal_mutable_text();
}
inline const std::string& Test2::_internal_text() const {
  return text_.Get();
}
inline void Test2::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test2::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Test2.text)
}
inline void Test2::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tutorial.Test2.text)
}
inline void Test2::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tutorial.Test2.text)
}
inline std::string* Test2::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test2::release_text() {
  // @@protoc_insertion_point(field_release:tutorial.Test2.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test2::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tutorial.Test2.text)
}

// -------------------------------------------------------------------

// Test3

// string text = 1;
inline void Test3::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test3::text() const {
  // @@protoc_insertion_point(field_get:tutorial.Test3.text)
  return _internal_text();
}
inline void Test3::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:tutorial.Test3.text)
}
inline std::string* Test3::mutable_text() {
  // @@protoc_insertion_point(field_mutable:tutorial.Test3.text)
  return _internal_mutable_text();
}
inline const std::string& Test3::_internal_text() const {
  return text_.Get();
}
inline void Test3::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test3::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Test3.text)
}
inline void Test3::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tutorial.Test3.text)
}
inline void Test3::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tutorial.Test3.text)
}
inline std::string* Test3::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test3::release_text() {
  // @@protoc_insertion_point(field_release:tutorial.Test3.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test3::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tutorial.Test3.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_testMsg_2eproto

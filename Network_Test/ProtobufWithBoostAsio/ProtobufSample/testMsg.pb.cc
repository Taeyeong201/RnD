// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testMsg.proto

#include "testMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_testMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test1_testMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test2_testMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test3_testMsg_2eproto;
namespace tutorial {
class TestMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMsg> _instance;
  const ::tutorial::Test1* test1_;
  const ::tutorial::Test2* test2_;
  const ::tutorial::Test3* test3_;
} _TestMsg_default_instance_;
class Test1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test1> _instance;
} _Test1_default_instance_;
class Test2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test2> _instance;
} _Test2_default_instance_;
class Test3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test3> _instance;
} _Test3_default_instance_;
}  // namespace tutorial
static void InitDefaultsscc_info_Test1_testMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_Test1_default_instance_;
    new (ptr) ::tutorial::Test1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::Test1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test1_testMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Test1_testMsg_2eproto}, {}};

static void InitDefaultsscc_info_Test2_testMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_Test2_default_instance_;
    new (ptr) ::tutorial::Test2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::Test2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test2_testMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Test2_testMsg_2eproto}, {}};

static void InitDefaultsscc_info_Test3_testMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_Test3_default_instance_;
    new (ptr) ::tutorial::Test3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::Test3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test3_testMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Test3_testMsg_2eproto}, {}};

static void InitDefaultsscc_info_TestMsg_testMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_TestMsg_default_instance_;
    new (ptr) ::tutorial::TestMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::TestMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TestMsg_testMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TestMsg_testMsg_2eproto}, {
      &scc_info_Test1_testMsg_2eproto.base,
      &scc_info_Test2_testMsg_2eproto.base,
      &scc_info_Test3_testMsg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_testMsg_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_testMsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_testMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_testMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::TestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tutorial::TestMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tutorial::TestMsgDefaultTypeInternal, test1_),
  offsetof(::tutorial::TestMsgDefaultTypeInternal, test2_),
  offsetof(::tutorial::TestMsgDefaultTypeInternal, test3_),
  PROTOBUF_FIELD_OFFSET(::tutorial::TestMsg, WhatTest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Test1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tutorial::Test1, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Test2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tutorial::Test2, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Test3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tutorial::Test3, text_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tutorial::TestMsg)},
  { 9, -1, sizeof(::tutorial::Test1)},
  { 15, -1, sizeof(::tutorial::Test2)},
  { 21, -1, sizeof(::tutorial::Test3)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_TestMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Test1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Test2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Test3_default_instance_),
};

const char descriptor_table_protodef_testMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtestMsg.proto\022\010tutorial\"{\n\007TestMsg\022 \n\005"
  "test1\030\001 \001(\0132\017.tutorial.Test1H\000\022 \n\005test2\030"
  "\002 \001(\0132\017.tutorial.Test2H\000\022 \n\005test3\030\003 \001(\0132"
  "\017.tutorial.Test3H\000B\n\n\010WhatTest\"\025\n\005Test1\022"
  "\014\n\004data\030\001 \001(\005\"\025\n\005Test2\022\014\n\004text\030\001 \001(\t\"\025\n\005"
  "Test3\022\014\n\004text\030\001 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_testMsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_testMsg_2eproto_sccs[4] = {
  &scc_info_Test1_testMsg_2eproto.base,
  &scc_info_Test2_testMsg_2eproto.base,
  &scc_info_Test3_testMsg_2eproto.base,
  &scc_info_TestMsg_testMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_testMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_testMsg_2eproto = {
  false, false, descriptor_table_protodef_testMsg_2eproto, "testMsg.proto", 227,
  &descriptor_table_testMsg_2eproto_once, descriptor_table_testMsg_2eproto_sccs, descriptor_table_testMsg_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_testMsg_2eproto::offsets,
  file_level_metadata_testMsg_2eproto, 4, file_level_enum_descriptors_testMsg_2eproto, file_level_service_descriptors_testMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_testMsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_testMsg_2eproto)), true);
namespace tutorial {

// ===================================================================

void TestMsg::InitAsDefaultInstance() {
  ::tutorial::_TestMsg_default_instance_.test1_ = const_cast< ::tutorial::Test1*>(
      ::tutorial::Test1::internal_default_instance());
  ::tutorial::_TestMsg_default_instance_.test2_ = const_cast< ::tutorial::Test2*>(
      ::tutorial::Test2::internal_default_instance());
  ::tutorial::_TestMsg_default_instance_.test3_ = const_cast< ::tutorial::Test3*>(
      ::tutorial::Test3::internal_default_instance());
}
class TestMsg::_Internal {
 public:
  static const ::tutorial::Test1& test1(const TestMsg* msg);
  static const ::tutorial::Test2& test2(const TestMsg* msg);
  static const ::tutorial::Test3& test3(const TestMsg* msg);
};

const ::tutorial::Test1&
TestMsg::_Internal::test1(const TestMsg* msg) {
  return *msg->WhatTest_.test1_;
}
const ::tutorial::Test2&
TestMsg::_Internal::test2(const TestMsg* msg) {
  return *msg->WhatTest_.test2_;
}
const ::tutorial::Test3&
TestMsg::_Internal::test3(const TestMsg* msg) {
  return *msg->WhatTest_.test3_;
}
void TestMsg::set_allocated_test1(::tutorial::Test1* test1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_WhatTest();
  if (test1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test1);
    if (message_arena != submessage_arena) {
      test1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test1, submessage_arena);
    }
    set_has_test1();
    WhatTest_.test1_ = test1;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.TestMsg.test1)
}
void TestMsg::set_allocated_test2(::tutorial::Test2* test2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_WhatTest();
  if (test2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test2);
    if (message_arena != submessage_arena) {
      test2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test2, submessage_arena);
    }
    set_has_test2();
    WhatTest_.test2_ = test2;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.TestMsg.test2)
}
void TestMsg::set_allocated_test3(::tutorial::Test3* test3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_WhatTest();
  if (test3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test3);
    if (message_arena != submessage_arena) {
      test3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test3, submessage_arena);
    }
    set_has_test3();
    WhatTest_.test3_ = test3;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.TestMsg.test3)
}
TestMsg::TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tutorial.TestMsg)
}
TestMsg::TestMsg(const TestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_WhatTest();
  switch (from.WhatTest_case()) {
    case kTest1: {
      _internal_mutable_test1()->::tutorial::Test1::MergeFrom(from._internal_test1());
      break;
    }
    case kTest2: {
      _internal_mutable_test2()->::tutorial::Test2::MergeFrom(from._internal_test2());
      break;
    }
    case kTest3: {
      _internal_mutable_test3()->::tutorial::Test3::MergeFrom(from._internal_test3());
      break;
    }
    case WHATTEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.TestMsg)
}

void TestMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMsg_testMsg_2eproto.base);
  clear_has_WhatTest();
}

TestMsg::~TestMsg() {
  // @@protoc_insertion_point(destructor:tutorial.TestMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_WhatTest()) {
    clear_WhatTest();
  }
}

void TestMsg::ArenaDtor(void* object) {
  TestMsg* _this = reinterpret_cast< TestMsg* >(object);
  (void)_this;
}
void TestMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMsg& TestMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMsg_testMsg_2eproto.base);
  return *internal_default_instance();
}


void TestMsg::clear_WhatTest() {
// @@protoc_insertion_point(one_of_clear_start:tutorial.TestMsg)
  switch (WhatTest_case()) {
    case kTest1: {
      if (GetArena() == nullptr) {
        delete WhatTest_.test1_;
      }
      break;
    }
    case kTest2: {
      if (GetArena() == nullptr) {
        delete WhatTest_.test2_;
      }
      break;
    }
    case kTest3: {
      if (GetArena() == nullptr) {
        delete WhatTest_.test3_;
      }
      break;
    }
    case WHATTEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHATTEST_NOT_SET;
}


void TestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.TestMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_WhatTest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tutorial.Test1 test1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.Test2 test2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_test2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.Test3 test3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_test3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.TestMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tutorial.Test1 test1 = 1;
  if (_internal_has_test1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test1(this), target, stream);
  }

  // .tutorial.Test2 test2 = 2;
  if (_internal_has_test2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::test2(this), target, stream);
  }

  // .tutorial.Test3 test3 = 3;
  if (_internal_has_test3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::test3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.TestMsg)
  return target;
}

size_t TestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.TestMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (WhatTest_case()) {
    // .tutorial.Test1 test1 = 1;
    case kTest1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *WhatTest_.test1_);
      break;
    }
    // .tutorial.Test2 test2 = 2;
    case kTest2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *WhatTest_.test2_);
      break;
    }
    // .tutorial.Test3 test3 = 3;
    case kTest3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *WhatTest_.test3_);
      break;
    }
    case WHATTEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.TestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.TestMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.TestMsg)
    MergeFrom(*source);
  }
}

void TestMsg::MergeFrom(const TestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.TestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.WhatTest_case()) {
    case kTest1: {
      _internal_mutable_test1()->::tutorial::Test1::MergeFrom(from._internal_test1());
      break;
    }
    case kTest2: {
      _internal_mutable_test2()->::tutorial::Test2::MergeFrom(from._internal_test2());
      break;
    }
    case kTest3: {
      _internal_mutable_test3()->::tutorial::Test3::MergeFrom(from._internal_test3());
      break;
    }
    case WHATTEST_NOT_SET: {
      break;
    }
  }
}

void TestMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.TestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg::CopyFrom(const TestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.TestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg::IsInitialized() const {
  return true;
}

void TestMsg::InternalSwap(TestMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(WhatTest_, other->WhatTest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Test1::InitAsDefaultInstance() {
}
class Test1::_Internal {
 public:
};

Test1::Test1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tutorial.Test1)
}
Test1::Test1(const Test1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:tutorial.Test1)
}

void Test1::SharedCtor() {
  data_ = 0;
}

Test1::~Test1() {
  // @@protoc_insertion_point(destructor:tutorial.Test1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Test1::ArenaDtor(void* object) {
  Test1* _this = reinterpret_cast< Test1* >(object);
  (void)_this;
}
void Test1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test1& Test1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test1_testMsg_2eproto.base);
  return *internal_default_instance();
}


void Test1::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Test1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Test1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Test1)
  return target;
}

size_t Test1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Test1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.Test1)
  GOOGLE_DCHECK_NE(&from, this);
  const Test1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.Test1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.Test1)
    MergeFrom(*source);
  }
}

void Test1::MergeFrom(const Test1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Test1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void Test1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.Test1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test1::CopyFrom(const Test1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Test1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test1::IsInitialized() const {
  return true;
}

void Test1::InternalSwap(Test1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Test1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Test2::InitAsDefaultInstance() {
}
class Test2::_Internal {
 public:
};

Test2::Test2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tutorial.Test2)
}
Test2::Test2(const Test2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.Test2)
}

void Test2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Test2_testMsg_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Test2::~Test2() {
  // @@protoc_insertion_point(destructor:tutorial.Test2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Test2::ArenaDtor(void* object) {
  Test2* _this = reinterpret_cast< Test2* >(object);
  (void)_this;
}
void Test2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test2& Test2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test2_testMsg_2eproto.base);
  return *internal_default_instance();
}


void Test2::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Test2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.Test2.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Test2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.Test2.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Test2)
  return target;
}

size_t Test2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Test2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.Test2)
  GOOGLE_DCHECK_NE(&from, this);
  const Test2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.Test2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.Test2)
    MergeFrom(*source);
  }
}

void Test2::MergeFrom(const Test2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Test2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
}

void Test2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test2::CopyFrom(const Test2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test2::IsInitialized() const {
  return true;
}

void Test2::InternalSwap(Test2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Test2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Test3::InitAsDefaultInstance() {
}
class Test3::_Internal {
 public:
};

Test3::Test3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tutorial.Test3)
}
Test3::Test3(const Test3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.Test3)
}

void Test3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Test3_testMsg_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Test3::~Test3() {
  // @@protoc_insertion_point(destructor:tutorial.Test3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Test3::ArenaDtor(void* object) {
  Test3* _this = reinterpret_cast< Test3* >(object);
  (void)_this;
}
void Test3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test3& Test3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test3_testMsg_2eproto.base);
  return *internal_default_instance();
}


void Test3::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Test3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.Test3.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Test3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.Test3.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Test3)
  return target;
}

size_t Test3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Test3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.Test3)
  GOOGLE_DCHECK_NE(&from, this);
  const Test3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.Test3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.Test3)
    MergeFrom(*source);
  }
}

void Test3::MergeFrom(const Test3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Test3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
}

void Test3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.Test3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test3::CopyFrom(const Test3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Test3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test3::IsInitialized() const {
  return true;
}

void Test3::InternalSwap(Test3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Test3::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::TestMsg* Arena::CreateMaybeMessage< ::tutorial::TestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::TestMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Test1* Arena::CreateMaybeMessage< ::tutorial::Test1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Test1 >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Test2* Arena::CreateMaybeMessage< ::tutorial::Test2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Test2 >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Test3* Arena::CreateMaybeMessage< ::tutorial::Test3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Test3 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioStream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AudioStream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AudioStream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AudioStream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AudioStream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AudioStream_2eproto;
namespace LiveStream {
class AudioFormat;
class AudioFormatDefaultTypeInternal;
extern AudioFormatDefaultTypeInternal _AudioFormat_default_instance_;
class DataStream;
class DataStreamDefaultTypeInternal;
extern DataStreamDefaultTypeInternal _DataStream_default_instance_;
class StreamHeader;
class StreamHeaderDefaultTypeInternal;
extern StreamHeaderDefaultTypeInternal _StreamHeader_default_instance_;
class StreamPayload;
class StreamPayloadDefaultTypeInternal;
extern StreamPayloadDefaultTypeInternal _StreamPayload_default_instance_;
}  // namespace LiveStream
PROTOBUF_NAMESPACE_OPEN
template<> ::LiveStream::AudioFormat* Arena::CreateMaybeMessage<::LiveStream::AudioFormat>(Arena*);
template<> ::LiveStream::DataStream* Arena::CreateMaybeMessage<::LiveStream::DataStream>(Arena*);
template<> ::LiveStream::StreamHeader* Arena::CreateMaybeMessage<::LiveStream::StreamHeader>(Arena*);
template<> ::LiveStream::StreamPayload* Arena::CreateMaybeMessage<::LiveStream::StreamPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LiveStream {

// ===================================================================

class AudioFormat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LiveStream.AudioFormat) */ {
 public:
  inline AudioFormat() : AudioFormat(nullptr) {}
  virtual ~AudioFormat();

  AudioFormat(const AudioFormat& from);
  AudioFormat(AudioFormat&& from) noexcept
    : AudioFormat() {
    *this = ::std::move(from);
  }

  inline AudioFormat& operator=(const AudioFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioFormat& operator=(AudioFormat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioFormat* internal_default_instance() {
    return reinterpret_cast<const AudioFormat*>(
               &_AudioFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioFormat& a, AudioFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioFormat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioFormat* New() const final {
    return CreateMaybeMessage<AudioFormat>(nullptr);
  }

  AudioFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioFormat& from);
  void MergeFrom(const AudioFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LiveStream.AudioFormat";
  }
  protected:
  explicit AudioFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AudioStream_2eproto);
    return ::descriptor_table_AudioStream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
    kBitrateFieldNumber = 2,
    kSampleRateFieldNumber = 3,
  };
  // string codec = 1;
  void clear_codec();
  const std::string& codec() const;
  void set_codec(const std::string& value);
  void set_codec(std::string&& value);
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  std::string* mutable_codec();
  std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // uint64 bitrate = 2;
  void clear_bitrate();
  ::PROTOBUF_NAMESPACE_ID::uint64 bitrate() const;
  void set_bitrate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bitrate() const;
  void _internal_set_bitrate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sampleRate = 3;
  void clear_samplerate();
  ::PROTOBUF_NAMESPACE_ID::uint64 samplerate() const;
  void set_samplerate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_samplerate() const;
  void _internal_set_samplerate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:LiveStream.AudioFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bitrate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 samplerate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AudioStream_2eproto;
};
// -------------------------------------------------------------------

class StreamHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LiveStream.StreamHeader) */ {
 public:
  inline StreamHeader() : StreamHeader(nullptr) {}
  virtual ~StreamHeader();

  StreamHeader(const StreamHeader& from);
  StreamHeader(StreamHeader&& from) noexcept
    : StreamHeader() {
    *this = ::std::move(from);
  }

  inline StreamHeader& operator=(const StreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamHeader& operator=(StreamHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamHeader* internal_default_instance() {
    return reinterpret_cast<const StreamHeader*>(
               &_StreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamHeader& a, StreamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamHeader* New() const final {
    return CreateMaybeMessage<StreamHeader>(nullptr);
  }

  StreamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamHeader& from);
  void MergeFrom(const StreamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LiveStream.StreamHeader";
  }
  protected:
  explicit StreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AudioStream_2eproto);
    return ::descriptor_table_AudioStream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint64 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:LiveStream.StreamHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AudioStream_2eproto;
};
// -------------------------------------------------------------------

class StreamPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LiveStream.StreamPayload) */ {
 public:
  inline StreamPayload() : StreamPayload(nullptr) {}
  virtual ~StreamPayload();

  StreamPayload(const StreamPayload& from);
  StreamPayload(StreamPayload&& from) noexcept
    : StreamPayload() {
    *this = ::std::move(from);
  }

  inline StreamPayload& operator=(const StreamPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPayload& operator=(StreamPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamPayload* internal_default_instance() {
    return reinterpret_cast<const StreamPayload*>(
               &_StreamPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamPayload& a, StreamPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamPayload* New() const final {
    return CreateMaybeMessage<StreamPayload>(nullptr);
  }

  StreamPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamPayload& from);
  void MergeFrom(const StreamPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LiveStream.StreamPayload";
  }
  protected:
  explicit StreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AudioStream_2eproto);
    return ::descriptor_table_AudioStream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:LiveStream.StreamPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AudioStream_2eproto;
};
// -------------------------------------------------------------------

class DataStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LiveStream.DataStream) */ {
 public:
  inline DataStream() : DataStream(nullptr) {}
  virtual ~DataStream();

  DataStream(const DataStream& from);
  DataStream(DataStream&& from) noexcept
    : DataStream() {
    *this = ::std::move(from);
  }

  inline DataStream& operator=(const DataStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStream& operator=(DataStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataStream& default_instance();

  enum ContentsCase {
    kHeader = 1,
    kPayload = 2,
    CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataStream* internal_default_instance() {
    return reinterpret_cast<const DataStream*>(
               &_DataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataStream& a, DataStream& b) {
    a.Swap(&b);
  }
  inline void Swap(DataStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataStream* New() const final {
    return CreateMaybeMessage<DataStream>(nullptr);
  }

  DataStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataStream& from);
  void MergeFrom(const DataStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LiveStream.DataStream";
  }
  protected:
  explicit DataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AudioStream_2eproto);
    return ::descriptor_table_AudioStream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // .LiveStream.StreamHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::LiveStream::StreamHeader& header() const;
  ::LiveStream::StreamHeader* release_header();
  ::LiveStream::StreamHeader* mutable_header();
  void set_allocated_header(::LiveStream::StreamHeader* header);
  private:
  const ::LiveStream::StreamHeader& _internal_header() const;
  ::LiveStream::StreamHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::LiveStream::StreamHeader* header);
  ::LiveStream::StreamHeader* unsafe_arena_release_header();

  // .LiveStream.StreamPayload payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::LiveStream::StreamPayload& payload() const;
  ::LiveStream::StreamPayload* release_payload();
  ::LiveStream::StreamPayload* mutable_payload();
  void set_allocated_payload(::LiveStream::StreamPayload* payload);
  private:
  const ::LiveStream::StreamPayload& _internal_payload() const;
  ::LiveStream::StreamPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::LiveStream::StreamPayload* payload);
  ::LiveStream::StreamPayload* unsafe_arena_release_payload();

  void clear_contents();
  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:LiveStream.DataStream)
 private:
  class _Internal;
  void set_has_header();
  void set_has_payload();

  inline bool has_contents() const;
  inline void clear_has_contents();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentsUnion {
    ContentsUnion() {}
    ::LiveStream::StreamHeader* header_;
    ::LiveStream::StreamPayload* payload_;
  } contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_AudioStream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioFormat

// string codec = 1;
inline void AudioFormat::clear_codec() {
  codec_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AudioFormat::codec() const {
  // @@protoc_insertion_point(field_get:LiveStream.AudioFormat.codec)
  return _internal_codec();
}
inline void AudioFormat::set_codec(const std::string& value) {
  _internal_set_codec(value);
  // @@protoc_insertion_point(field_set:LiveStream.AudioFormat.codec)
}
inline std::string* AudioFormat::mutable_codec() {
  // @@protoc_insertion_point(field_mutable:LiveStream.AudioFormat.codec)
  return _internal_mutable_codec();
}
inline const std::string& AudioFormat::_internal_codec() const {
  return codec_.Get();
}
inline void AudioFormat::_internal_set_codec(const std::string& value) {
  
  codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AudioFormat::set_codec(std::string&& value) {
  
  codec_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LiveStream.AudioFormat.codec)
}
inline void AudioFormat::set_codec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LiveStream.AudioFormat.codec)
}
inline void AudioFormat::set_codec(const char* value,
    size_t size) {
  
  codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LiveStream.AudioFormat.codec)
}
inline std::string* AudioFormat::_internal_mutable_codec() {
  
  return codec_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AudioFormat::release_codec() {
  // @@protoc_insertion_point(field_release:LiveStream.AudioFormat.codec)
  return codec_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioFormat::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    
  } else {
    
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LiveStream.AudioFormat.codec)
}

// uint64 bitrate = 2;
inline void AudioFormat::clear_bitrate() {
  bitrate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AudioFormat::_internal_bitrate() const {
  return bitrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AudioFormat::bitrate() const {
  // @@protoc_insertion_point(field_get:LiveStream.AudioFormat.bitrate)
  return _internal_bitrate();
}
inline void AudioFormat::_internal_set_bitrate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bitrate_ = value;
}
inline void AudioFormat::set_bitrate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:LiveStream.AudioFormat.bitrate)
}

// uint64 sampleRate = 3;
inline void AudioFormat::clear_samplerate() {
  samplerate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AudioFormat::_internal_samplerate() const {
  return samplerate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AudioFormat::samplerate() const {
  // @@protoc_insertion_point(field_get:LiveStream.AudioFormat.sampleRate)
  return _internal_samplerate();
}
inline void AudioFormat::_internal_set_samplerate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  samplerate_ = value;
}
inline void AudioFormat::set_samplerate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_samplerate(value);
  // @@protoc_insertion_point(field_set:LiveStream.AudioFormat.sampleRate)
}

// -------------------------------------------------------------------

// StreamHeader

// uint64 code = 1;
inline void StreamHeader::clear_code() {
  code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamHeader::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamHeader::code() const {
  // @@protoc_insertion_point(field_get:LiveStream.StreamHeader.code)
  return _internal_code();
}
inline void StreamHeader::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  code_ = value;
}
inline void StreamHeader::set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:LiveStream.StreamHeader.code)
}

// string status = 2;
inline void StreamHeader::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamHeader::status() const {
  // @@protoc_insertion_point(field_get:LiveStream.StreamHeader.status)
  return _internal_status();
}
inline void StreamHeader::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:LiveStream.StreamHeader.status)
}
inline std::string* StreamHeader::mutable_status() {
  // @@protoc_insertion_point(field_mutable:LiveStream.StreamHeader.status)
  return _internal_mutable_status();
}
inline const std::string& StreamHeader::_internal_status() const {
  return status_.Get();
}
inline void StreamHeader::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamHeader::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LiveStream.StreamHeader.status)
}
inline void StreamHeader::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LiveStream.StreamHeader.status)
}
inline void StreamHeader::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LiveStream.StreamHeader.status)
}
inline std::string* StreamHeader::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamHeader::release_status() {
  // @@protoc_insertion_point(field_release:LiveStream.StreamHeader.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamHeader::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LiveStream.StreamHeader.status)
}

// -------------------------------------------------------------------

// StreamPayload

// bytes data = 1;
inline void StreamPayload::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamPayload::data() const {
  // @@protoc_insertion_point(field_get:LiveStream.StreamPayload.data)
  return _internal_data();
}
inline void StreamPayload::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:LiveStream.StreamPayload.data)
}
inline std::string* StreamPayload::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LiveStream.StreamPayload.data)
  return _internal_mutable_data();
}
inline const std::string& StreamPayload::_internal_data() const {
  return data_.Get();
}
inline void StreamPayload::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamPayload::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LiveStream.StreamPayload.data)
}
inline void StreamPayload::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LiveStream.StreamPayload.data)
}
inline void StreamPayload::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LiveStream.StreamPayload.data)
}
inline std::string* StreamPayload::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamPayload::release_data() {
  // @@protoc_insertion_point(field_release:LiveStream.StreamPayload.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamPayload::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LiveStream.StreamPayload.data)
}

// -------------------------------------------------------------------

// DataStream

// .LiveStream.StreamHeader header = 1;
inline bool DataStream::_internal_has_header() const {
  return contents_case() == kHeader;
}
inline bool DataStream::has_header() const {
  return _internal_has_header();
}
inline void DataStream::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void DataStream::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete contents_.header_;
    }
    clear_has_contents();
  }
}
inline ::LiveStream::StreamHeader* DataStream::release_header() {
  // @@protoc_insertion_point(field_release:LiveStream.DataStream.header)
  if (_internal_has_header()) {
    clear_has_contents();
      ::LiveStream::StreamHeader* temp = contents_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LiveStream::StreamHeader& DataStream::_internal_header() const {
  return _internal_has_header()
      ? *contents_.header_
      : *reinterpret_cast< ::LiveStream::StreamHeader*>(&::LiveStream::_StreamHeader_default_instance_);
}
inline const ::LiveStream::StreamHeader& DataStream::header() const {
  // @@protoc_insertion_point(field_get:LiveStream.DataStream.header)
  return _internal_header();
}
inline ::LiveStream::StreamHeader* DataStream::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LiveStream.DataStream.header)
  if (_internal_has_header()) {
    clear_has_contents();
    ::LiveStream::StreamHeader* temp = contents_.header_;
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataStream::unsafe_arena_set_allocated_header(::LiveStream::StreamHeader* header) {
  clear_contents();
  if (header) {
    set_has_header();
    contents_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LiveStream.DataStream.header)
}
inline ::LiveStream::StreamHeader* DataStream::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_contents();
    set_has_header();
    contents_.header_ = CreateMaybeMessage< ::LiveStream::StreamHeader >(GetArena());
  }
  return contents_.header_;
}
inline ::LiveStream::StreamHeader* DataStream::mutable_header() {
  // @@protoc_insertion_point(field_mutable:LiveStream.DataStream.header)
  return _internal_mutable_header();
}

// .LiveStream.StreamPayload payload = 2;
inline bool DataStream::_internal_has_payload() const {
  return contents_case() == kPayload;
}
inline bool DataStream::has_payload() const {
  return _internal_has_payload();
}
inline void DataStream::set_has_payload() {
  _oneof_case_[0] = kPayload;
}
inline void DataStream::clear_payload() {
  if (_internal_has_payload()) {
    if (GetArena() == nullptr) {
      delete contents_.payload_;
    }
    clear_has_contents();
  }
}
inline ::LiveStream::StreamPayload* DataStream::release_payload() {
  // @@protoc_insertion_point(field_release:LiveStream.DataStream.payload)
  if (_internal_has_payload()) {
    clear_has_contents();
      ::LiveStream::StreamPayload* temp = contents_.payload_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LiveStream::StreamPayload& DataStream::_internal_payload() const {
  return _internal_has_payload()
      ? *contents_.payload_
      : *reinterpret_cast< ::LiveStream::StreamPayload*>(&::LiveStream::_StreamPayload_default_instance_);
}
inline const ::LiveStream::StreamPayload& DataStream::payload() const {
  // @@protoc_insertion_point(field_get:LiveStream.DataStream.payload)
  return _internal_payload();
}
inline ::LiveStream::StreamPayload* DataStream::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LiveStream.DataStream.payload)
  if (_internal_has_payload()) {
    clear_has_contents();
    ::LiveStream::StreamPayload* temp = contents_.payload_;
    contents_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataStream::unsafe_arena_set_allocated_payload(::LiveStream::StreamPayload* payload) {
  clear_contents();
  if (payload) {
    set_has_payload();
    contents_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LiveStream.DataStream.payload)
}
inline ::LiveStream::StreamPayload* DataStream::_internal_mutable_payload() {
  if (!_internal_has_payload()) {
    clear_contents();
    set_has_payload();
    contents_.payload_ = CreateMaybeMessage< ::LiveStream::StreamPayload >(GetArena());
  }
  return contents_.payload_;
}
inline ::LiveStream::StreamPayload* DataStream::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:LiveStream.DataStream.payload)
  return _internal_mutable_payload();
}

inline bool DataStream::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void DataStream::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline DataStream::ContentsCase DataStream::contents_case() const {
  return DataStream::ContentsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LiveStream

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AudioStream_2eproto

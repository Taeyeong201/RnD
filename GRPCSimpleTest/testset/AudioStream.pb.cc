// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioStream.proto

#include "AudioStream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AudioStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamHeader_AudioStream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AudioStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamPayload_AudioStream_2eproto;
namespace LiveStream {
class AudioFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioFormat> _instance;
} _AudioFormat_default_instance_;
class StreamHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamHeader> _instance;
} _StreamHeader_default_instance_;
class StreamPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamPayload> _instance;
} _StreamPayload_default_instance_;
class DataStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataStream> _instance;
  const ::LiveStream::StreamHeader* header_;
  const ::LiveStream::StreamPayload* payload_;
} _DataStream_default_instance_;
}  // namespace LiveStream
static void InitDefaultsscc_info_AudioFormat_AudioStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LiveStream::_AudioFormat_default_instance_;
    new (ptr) ::LiveStream::AudioFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LiveStream::AudioFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFormat_AudioStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioFormat_AudioStream_2eproto}, {}};

static void InitDefaultsscc_info_DataStream_AudioStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LiveStream::_DataStream_default_instance_;
    new (ptr) ::LiveStream::DataStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LiveStream::DataStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataStream_AudioStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DataStream_AudioStream_2eproto}, {
      &scc_info_StreamHeader_AudioStream_2eproto.base,
      &scc_info_StreamPayload_AudioStream_2eproto.base,}};

static void InitDefaultsscc_info_StreamHeader_AudioStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LiveStream::_StreamHeader_default_instance_;
    new (ptr) ::LiveStream::StreamHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LiveStream::StreamHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamHeader_AudioStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamHeader_AudioStream_2eproto}, {}};

static void InitDefaultsscc_info_StreamPayload_AudioStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LiveStream::_StreamPayload_default_instance_;
    new (ptr) ::LiveStream::StreamPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LiveStream::StreamPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamPayload_AudioStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamPayload_AudioStream_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AudioStream_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AudioStream_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AudioStream_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AudioStream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LiveStream::AudioFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LiveStream::AudioFormat, codec_),
  PROTOBUF_FIELD_OFFSET(::LiveStream::AudioFormat, bitrate_),
  PROTOBUF_FIELD_OFFSET(::LiveStream::AudioFormat, samplerate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LiveStream::StreamHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LiveStream::StreamHeader, code_),
  PROTOBUF_FIELD_OFFSET(::LiveStream::StreamHeader, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LiveStream::StreamPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LiveStream::StreamPayload, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LiveStream::DataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::LiveStream::DataStream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::LiveStream::DataStreamDefaultTypeInternal, header_),
  offsetof(::LiveStream::DataStreamDefaultTypeInternal, payload_),
  PROTOBUF_FIELD_OFFSET(::LiveStream::DataStream, contents_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LiveStream::AudioFormat)},
  { 8, -1, sizeof(::LiveStream::StreamHeader)},
  { 15, -1, sizeof(::LiveStream::StreamPayload)},
  { 21, -1, sizeof(::LiveStream::DataStream)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LiveStream::_AudioFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LiveStream::_StreamHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LiveStream::_StreamPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LiveStream::_DataStream_default_instance_),
};

const char descriptor_table_protodef_AudioStream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021AudioStream.proto\022\nLiveStream\"A\n\013Audio"
  "Format\022\r\n\005codec\030\001 \001(\t\022\017\n\007bitrate\030\002 \001(\004\022\022"
  "\n\nsampleRate\030\003 \001(\004\",\n\014StreamHeader\022\014\n\004co"
  "de\030\001 \001(\004\022\016\n\006status\030\002 \001(\t\"\035\n\rStreamPayloa"
  "d\022\014\n\004data\030\001 \001(\014\"r\n\nDataStream\022*\n\006header\030"
  "\001 \001(\0132\030.LiveStream.StreamHeaderH\000\022,\n\007pay"
  "load\030\002 \001(\0132\031.LiveStream.StreamPayloadH\000B"
  "\n\n\010contents2X\n\013AudioStream\022I\n\022AudioStrea"
  "mReqeust\022\027.LiveStream.AudioFormat\032\026.Live"
  "Stream.DataStream\"\0000\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AudioStream_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AudioStream_2eproto_sccs[4] = {
  &scc_info_AudioFormat_AudioStream_2eproto.base,
  &scc_info_DataStream_AudioStream_2eproto.base,
  &scc_info_StreamHeader_AudioStream_2eproto.base,
  &scc_info_StreamPayload_AudioStream_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AudioStream_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AudioStream_2eproto = {
  false, false, descriptor_table_protodef_AudioStream_2eproto, "AudioStream.proto", 389,
  &descriptor_table_AudioStream_2eproto_once, descriptor_table_AudioStream_2eproto_sccs, descriptor_table_AudioStream_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_AudioStream_2eproto::offsets,
  file_level_metadata_AudioStream_2eproto, 4, file_level_enum_descriptors_AudioStream_2eproto, file_level_service_descriptors_AudioStream_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AudioStream_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AudioStream_2eproto)), true);
namespace LiveStream {

// ===================================================================

void AudioFormat::InitAsDefaultInstance() {
}
class AudioFormat::_Internal {
 public:
};

AudioFormat::AudioFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LiveStream.AudioFormat)
}
AudioFormat::AudioFormat(const AudioFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_codec().empty()) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_codec(),
      GetArena());
  }
  ::memcpy(&bitrate_, &from.bitrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&samplerate_) -
    reinterpret_cast<char*>(&bitrate_)) + sizeof(samplerate_));
  // @@protoc_insertion_point(copy_constructor:LiveStream.AudioFormat)
}

void AudioFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioFormat_AudioStream_2eproto.base);
  codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bitrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplerate_) -
      reinterpret_cast<char*>(&bitrate_)) + sizeof(samplerate_));
}

AudioFormat::~AudioFormat() {
  // @@protoc_insertion_point(destructor:LiveStream.AudioFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  codec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioFormat::ArenaDtor(void* object) {
  AudioFormat* _this = reinterpret_cast< AudioFormat* >(object);
  (void)_this;
}
void AudioFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFormat& AudioFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioFormat_AudioStream_2eproto.base);
  return *internal_default_instance();
}


void AudioFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:LiveStream.AudioFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codec_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&bitrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplerate_) -
      reinterpret_cast<char*>(&bitrate_)) + sizeof(samplerate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_codec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LiveStream.AudioFormat.codec"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bitrate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sampleRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          samplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LiveStream.AudioFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string codec = 1;
  if (this->codec().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LiveStream.AudioFormat.codec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codec(), target);
  }

  // uint64 bitrate = 2;
  if (this->bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bitrate(), target);
  }

  // uint64 sampleRate = 3;
  if (this->samplerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_samplerate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LiveStream.AudioFormat)
  return target;
}

size_t AudioFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LiveStream.AudioFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string codec = 1;
  if (this->codec().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec());
  }

  // uint64 bitrate = 2;
  if (this->bitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bitrate());
  }

  // uint64 sampleRate = 3;
  if (this->samplerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_samplerate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LiveStream.AudioFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LiveStream.AudioFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LiveStream.AudioFormat)
    MergeFrom(*source);
  }
}

void AudioFormat::MergeFrom(const AudioFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LiveStream.AudioFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.codec().size() > 0) {
    _internal_set_codec(from._internal_codec());
  }
  if (from.bitrate() != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
  if (from.samplerate() != 0) {
    _internal_set_samplerate(from._internal_samplerate());
  }
}

void AudioFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LiveStream.AudioFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFormat::CopyFrom(const AudioFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiveStream.AudioFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFormat::IsInitialized() const {
  return true;
}

void AudioFormat::InternalSwap(AudioFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  codec_.Swap(&other->codec_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioFormat, samplerate_)
      + sizeof(AudioFormat::samplerate_)
      - PROTOBUF_FIELD_OFFSET(AudioFormat, bitrate_)>(
          reinterpret_cast<char*>(&bitrate_),
          reinterpret_cast<char*>(&other->bitrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamHeader::InitAsDefaultInstance() {
}
class StreamHeader::_Internal {
 public:
};

StreamHeader::StreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LiveStream.StreamHeader)
}
StreamHeader::StreamHeader(const StreamHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:LiveStream.StreamHeader)
}

void StreamHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamHeader_AudioStream_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = PROTOBUF_ULONGLONG(0);
}

StreamHeader::~StreamHeader() {
  // @@protoc_insertion_point(destructor:LiveStream.StreamHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamHeader::ArenaDtor(void* object) {
  StreamHeader* _this = reinterpret_cast< StreamHeader* >(object);
  (void)_this;
}
void StreamHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamHeader& StreamHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamHeader_AudioStream_2eproto.base);
  return *internal_default_instance();
}


void StreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:LiveStream.StreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LiveStream.StreamHeader.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LiveStream.StreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_code(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LiveStream.StreamHeader.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LiveStream.StreamHeader)
  return target;
}

size_t StreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LiveStream.StreamHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // uint64 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LiveStream.StreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LiveStream.StreamHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LiveStream.StreamHeader)
    MergeFrom(*source);
  }
}

void StreamHeader::MergeFrom(const StreamHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LiveStream.StreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void StreamHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LiveStream.StreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamHeader::CopyFrom(const StreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiveStream.StreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamHeader::IsInitialized() const {
  return true;
}

void StreamHeader::InternalSwap(StreamHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamPayload::InitAsDefaultInstance() {
}
class StreamPayload::_Internal {
 public:
};

StreamPayload::StreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LiveStream.StreamPayload)
}
StreamPayload::StreamPayload(const StreamPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LiveStream.StreamPayload)
}

void StreamPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamPayload_AudioStream_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StreamPayload::~StreamPayload() {
  // @@protoc_insertion_point(destructor:LiveStream.StreamPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamPayload::ArenaDtor(void* object) {
  StreamPayload* _this = reinterpret_cast< StreamPayload* >(object);
  (void)_this;
}
void StreamPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamPayload& StreamPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamPayload_AudioStream_2eproto.base);
  return *internal_default_instance();
}


void StreamPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:LiveStream.StreamPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LiveStream.StreamPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LiveStream.StreamPayload)
  return target;
}

size_t StreamPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LiveStream.StreamPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LiveStream.StreamPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LiveStream.StreamPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LiveStream.StreamPayload)
    MergeFrom(*source);
  }
}

void StreamPayload::MergeFrom(const StreamPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LiveStream.StreamPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void StreamPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LiveStream.StreamPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamPayload::CopyFrom(const StreamPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiveStream.StreamPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPayload::IsInitialized() const {
  return true;
}

void StreamPayload::InternalSwap(StreamPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataStream::InitAsDefaultInstance() {
  ::LiveStream::_DataStream_default_instance_.header_ = const_cast< ::LiveStream::StreamHeader*>(
      ::LiveStream::StreamHeader::internal_default_instance());
  ::LiveStream::_DataStream_default_instance_.payload_ = const_cast< ::LiveStream::StreamPayload*>(
      ::LiveStream::StreamPayload::internal_default_instance());
}
class DataStream::_Internal {
 public:
  static const ::LiveStream::StreamHeader& header(const DataStream* msg);
  static const ::LiveStream::StreamPayload& payload(const DataStream* msg);
};

const ::LiveStream::StreamHeader&
DataStream::_Internal::header(const DataStream* msg) {
  return *msg->contents_.header_;
}
const ::LiveStream::StreamPayload&
DataStream::_Internal::payload(const DataStream* msg) {
  return *msg->contents_.payload_;
}
void DataStream::set_allocated_header(::LiveStream::StreamHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contents();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    contents_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:LiveStream.DataStream.header)
}
void DataStream::set_allocated_payload(::LiveStream::StreamPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contents();
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    set_has_payload();
    contents_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_set_allocated:LiveStream.DataStream.payload)
}
DataStream::DataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LiveStream.DataStream)
}
DataStream::DataStream(const DataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_contents();
  switch (from.contents_case()) {
    case kHeader: {
      _internal_mutable_header()->::LiveStream::StreamHeader::MergeFrom(from._internal_header());
      break;
    }
    case kPayload: {
      _internal_mutable_payload()->::LiveStream::StreamPayload::MergeFrom(from._internal_payload());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LiveStream.DataStream)
}

void DataStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataStream_AudioStream_2eproto.base);
  clear_has_contents();
}

DataStream::~DataStream() {
  // @@protoc_insertion_point(destructor:LiveStream.DataStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_contents()) {
    clear_contents();
  }
}

void DataStream::ArenaDtor(void* object) {
  DataStream* _this = reinterpret_cast< DataStream* >(object);
  (void)_this;
}
void DataStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataStream& DataStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataStream_AudioStream_2eproto.base);
  return *internal_default_instance();
}


void DataStream::clear_contents() {
// @@protoc_insertion_point(one_of_clear_start:LiveStream.DataStream)
  switch (contents_case()) {
    case kHeader: {
      if (GetArena() == nullptr) {
        delete contents_.header_;
      }
      break;
    }
    case kPayload: {
      if (GetArena() == nullptr) {
        delete contents_.payload_;
      }
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENTS_NOT_SET;
}


void DataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:LiveStream.DataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_contents();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LiveStream.StreamHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LiveStream.StreamPayload payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LiveStream.DataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LiveStream.StreamHeader header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .LiveStream.StreamPayload payload = 2;
  if (_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LiveStream.DataStream)
  return target;
}

size_t DataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LiveStream.DataStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (contents_case()) {
    // .LiveStream.StreamHeader header = 1;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.header_);
      break;
    }
    // .LiveStream.StreamPayload payload = 2;
    case kPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.payload_);
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LiveStream.DataStream)
  GOOGLE_DCHECK_NE(&from, this);
  const DataStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LiveStream.DataStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LiveStream.DataStream)
    MergeFrom(*source);
  }
}

void DataStream::MergeFrom(const DataStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LiveStream.DataStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.contents_case()) {
    case kHeader: {
      _internal_mutable_header()->::LiveStream::StreamHeader::MergeFrom(from._internal_header());
      break;
    }
    case kPayload: {
      _internal_mutable_payload()->::LiveStream::StreamPayload::MergeFrom(from._internal_payload());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
}

void DataStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LiveStream.DataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataStream::CopyFrom(const DataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiveStream.DataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream::IsInitialized() const {
  return true;
}

void DataStream::InternalSwap(DataStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(contents_, other->contents_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LiveStream
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LiveStream::AudioFormat* Arena::CreateMaybeMessage< ::LiveStream::AudioFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LiveStream::AudioFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::LiveStream::StreamHeader* Arena::CreateMaybeMessage< ::LiveStream::StreamHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LiveStream::StreamHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::LiveStream::StreamPayload* Arena::CreateMaybeMessage< ::LiveStream::StreamPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LiveStream::StreamPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::LiveStream::DataStream* Arena::CreateMaybeMessage< ::LiveStream::DataStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LiveStream::DataStream >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

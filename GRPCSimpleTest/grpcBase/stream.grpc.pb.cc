// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stream.proto

#include "stream.pb.h"
#include "stream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace simpleStream {

static const char* SimpleStream_method_names[] = {
  "/simpleStream.SimpleStream/ServerUpload",
  "/simpleStream.SimpleStream/ClientDownload",
};

std::unique_ptr< SimpleStream::Stub> SimpleStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SimpleStream::Stub> stub(new SimpleStream::Stub(channel));
  return stub;
}

SimpleStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ServerUpload_(SimpleStream_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ClientDownload_(SimpleStream_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::simpleStream::SendRequest>* SimpleStream::Stub::ServerUploadRaw(::grpc::ClientContext* context, ::simpleStream::SendResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::simpleStream::SendRequest>::Create(channel_.get(), rpcmethod_ServerUpload_, context, response);
}

void SimpleStream::Stub::experimental_async::ServerUpload(::grpc::ClientContext* context, ::simpleStream::SendResponse* response, ::grpc::experimental::ClientWriteReactor< ::simpleStream::SendRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::simpleStream::SendRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerUpload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::simpleStream::SendRequest>* SimpleStream::Stub::AsyncServerUploadRaw(::grpc::ClientContext* context, ::simpleStream::SendResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::simpleStream::SendRequest>::Create(channel_.get(), cq, rpcmethod_ServerUpload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::simpleStream::SendRequest>* SimpleStream::Stub::PrepareAsyncServerUploadRaw(::grpc::ClientContext* context, ::simpleStream::SendResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::simpleStream::SendRequest>::Create(channel_.get(), cq, rpcmethod_ServerUpload_, context, response, false, nullptr);
}

::grpc::ClientReader< ::simpleStream::RecvResponse>* SimpleStream::Stub::ClientDownloadRaw(::grpc::ClientContext* context, const ::simpleStream::RecvRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::simpleStream::RecvResponse>::Create(channel_.get(), rpcmethod_ClientDownload_, context, request);
}

void SimpleStream::Stub::experimental_async::ClientDownload(::grpc::ClientContext* context, ::simpleStream::RecvRequest* request, ::grpc::experimental::ClientReadReactor< ::simpleStream::RecvResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::simpleStream::RecvResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ClientDownload_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::simpleStream::RecvResponse>* SimpleStream::Stub::AsyncClientDownloadRaw(::grpc::ClientContext* context, const ::simpleStream::RecvRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::simpleStream::RecvResponse>::Create(channel_.get(), cq, rpcmethod_ClientDownload_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::simpleStream::RecvResponse>* SimpleStream::Stub::PrepareAsyncClientDownloadRaw(::grpc::ClientContext* context, const ::simpleStream::RecvRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::simpleStream::RecvResponse>::Create(channel_.get(), cq, rpcmethod_ClientDownload_, context, request, false, nullptr);
}

SimpleStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleStream_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< SimpleStream::Service, ::simpleStream::SendRequest, ::simpleStream::SendResponse>(
          [](SimpleStream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::simpleStream::SendRequest>* reader,
             ::simpleStream::SendResponse* resp) {
               return service->ServerUpload(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleStream_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SimpleStream::Service, ::simpleStream::RecvRequest, ::simpleStream::RecvResponse>(
          [](SimpleStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::simpleStream::RecvRequest* req,
             ::grpc::ServerWriter<::simpleStream::RecvResponse>* writer) {
               return service->ClientDownload(ctx, req, writer);
             }, this)));
}

SimpleStream::Service::~Service() {
}

::grpc::Status SimpleStream::Service::ServerUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::simpleStream::SendRequest>* reader, ::simpleStream::SendResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleStream::Service::ClientDownload(::grpc::ServerContext* context, const ::simpleStream::RecvRequest* request, ::grpc::ServerWriter< ::simpleStream::RecvResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace simpleStream

